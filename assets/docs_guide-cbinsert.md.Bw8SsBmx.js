import{_ as t,c as o,o as n,a5 as i,a$ as a,b0 as c,b1 as r,b2 as s,b3 as d,b4 as l,b5 as p,b6 as u,b7 as h,b8 as m,b9 as g,ba as b,bb as f,bc as y,bd as k,be as _,bf as w,bg as v,bh as P,bi as x,bj as S,bk as I,bl as T,bm as E,bn as C}from"./chunks/framework.CgTIqH8g.js";const F=JSON.parse('{"title":"Code Block Insertion","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide-cbinsert.md","filePath":"docs/guide-cbinsert.md","lastUpdated":1761037405000}'),B={name:"docs/guide-cbinsert.md"};function A(q,e,L,M,R,j){return n(),o("div",null,[...e[0]||(e[0]=[i('<h1 id="code-block-insertion" tabindex="-1">Code Block Insertion <a class="header-anchor" href="#code-block-insertion" aria-label="Permalink to “Code Block Insertion”">​</a></h1><p>Liii STEM provides the function of <strong>using code blocks to typeset computer program source code</strong>. This guide will help you achieve the program code standard typesetting shown in the figure below.</p><p><img src="'+a+'" alt=""></p><p>As shown, this is a Python code in Python code environment. Liii STEM will automatically handle font, color, and indentation in code typesetting.</p><h2 id="static-code-blocks" tabindex="-1">Static Code Blocks <a class="header-anchor" href="#static-code-blocks" aria-label="Permalink to “Static Code Blocks”">​</a></h2><h3 id="entering-static-code-block-environment" tabindex="-1">Entering Static Code Block Environment <a class="header-anchor" href="#entering-static-code-block-environment" aria-label="Permalink to “Entering Static Code Block Environment”">​</a></h3><p>You can enter the static code block environment in the following ways:</p><ul><li>In the Mode Toolbar, click <code>&lt;/&gt; (Insert Computer Program)</code> -&gt; <code>Code Block</code>, you can select <code>Plain Text</code> to enter the environment named verbatim code. If you need to typeset C++, Scheme, or Shell code, you can also directly select the corresponding options to enter cpp code, scm code, and shell code environments.</li></ul><p><img src="'+c+'" alt=""></p><p>The environment toolbar and cursor in the figure below indicate that we are in the verbatim code environment.</p><p><img src="'+r+'" alt=""></p><ul><li>After adding Python, Scala, or Goldfish macro packages, you can also click the <code>Code Block</code> option as shown below to directly enter the corresponding python code, scala code, and goldfish code environments.</li></ul><p><img src="'+s+'" alt=""></p><blockquote><p>If the corresponding macro package is not added, the situation shown in the figure below will appear. At this time, you can also click <code>Activate</code> to directly add the corresponding macro package. <img src="'+d+'" alt=""></p></blockquote><h3 id="adjusting-code-block-environment" tabindex="-1">Adjusting Code Block Environment <a class="header-anchor" href="#adjusting-code-block-environment" aria-label="Permalink to “Adjusting Code Block Environment”">​</a></h3><p>After entering the code block environment, you can click the <code>Structure Variant</code> option in the environment toolbar to switch between different language corresponding code block environments. If content has already been entered in the code block, the typesetting will change.</p><p><img src="'+l+'" alt=""></p><p><img src="'+p+'" alt=""></p><h3 id="typesetting-code" tabindex="-1">Typesetting Code <a class="header-anchor" href="#typesetting-code" aria-label="Permalink to “Typesetting Code”">​</a></h3><p>After setting up the code block environment, you can typeset the code content in the code block. Liii STEM will automatically handle font, color, and indentation in code typesetting.</p><h2 id="executable-code-blocks-python" tabindex="-1">Executable Code Blocks (Python) <a class="header-anchor" href="#executable-code-blocks-python" aria-label="Permalink to “Executable Code Blocks (Python)”">​</a></h2><p>In Liii STEM, you can also run desired code by inserting <strong>executable code blocks</strong>. Below we introduce this function using Python as an example.</p><h3 id="entering-executable-code-block-environment" tabindex="-1">Entering Executable Code Block Environment <a class="header-anchor" href="#entering-executable-code-block-environment" aria-label="Permalink to “Entering Executable Code Block Environment”">​</a></h3><p>To use this function, you first need to install Python on your computer. Then click <code>Insert Session</code> -&gt; <code>Python</code> on the Mode Toolbar to enter the executable code block environment.</p><p><img src="'+u+'" alt=""></p><p>After entering for the first time, the page will change as shown below.</p><p><img src="'+h+'" alt=""></p><h3 id="running-code" tabindex="-1">Running Code <a class="header-anchor" href="#running-code" aria-label="Permalink to “Running Code”">​</a></h3><p>Enter the code into the code block to run it.</p><p><img src="'+m+'" alt=""></p><p>Liii STEM supports importing all conda code environments.</p><h3 id="python-plugin-usage-instructions" tabindex="-1">Python Plugin Usage Instructions <a class="header-anchor" href="#python-plugin-usage-instructions" aria-label="Permalink to “Python Plugin Usage Instructions”">​</a></h3><p>You can view the detailed usage guide for the Python plugin in <code>Help</code> -&gt; <code>Plugins</code> -&gt; <code>Python</code>.</p><p><img src="'+g+'" alt=""></p><p>Below is a brief introduction to plugin usage.</p><h4 id="statement-input" tabindex="-1">Statement Input <a class="header-anchor" href="#statement-input" aria-label="Permalink to “Statement Input”">​</a></h4><p>Use <code>Shift</code> + <code>Return/Enter</code> keys to separate statements.</p><p><img src="'+b+'" alt=""></p><p>When you are ready for Python to evaluate the program you entered, click the <code>Enter</code> key or <code>Return</code> key.</p><p><img src="'+f+'" alt=""></p><p>If you want to input multiple lines of content at once, select <code>Focus</code> -&gt; <code>Input Options</code> -&gt; <code>Multi-line Input</code>, then you can directly click the <code>Enter</code> key or <code>Return</code> key for line breaks. When you need to run, click <code>Multi-line Input</code> again to close this option, then click the <code>Enter</code> key or <code>Return</code> key.</p><p><img src="'+y+'" alt=""></p><p><img src="'+k+'" alt=""></p><blockquote><p>The situation shown above indicates that <code>Multi-line Input</code> is enabled.</p></blockquote><h4 id="command-auto-completion" tabindex="-1">Command Auto-completion <a class="header-anchor" href="#command-auto-completion" aria-label="Permalink to “Command Auto-completion”">​</a></h4><p>You can type the first letter of a built-in command or previously defined command, then press the <code>Tab</code> key until you find the completion option you want.</p><p><img src="'+_+'" alt=""></p><h4 id="numbering-code-lines" tabindex="-1">Numbering Code Lines <a class="header-anchor" href="#numbering-code-lines" aria-label="Permalink to “Numbering Code Lines”">​</a></h4><p>To number code lines, first use the command <code>\\numbered</code> to enter the numbering environment.</p><p><img src="'+w+'" alt=""></p><p>Then you can insert static code blocks in the numbering environment to achieve automatic numbering of code lines</p><p><img src="'+v+'" alt=""></p><h4 id="postscript-output-and-matplotlib-support" tabindex="-1">PostScript Output and matplotlib Support <a class="header-anchor" href="#postscript-output-and-matplotlib-support" aria-label="Permalink to “PostScript Output and matplotlib Support”">​</a></h4><p>Use the function ps_out(<strong>data</strong>) to output PostScript data directly to TeXmacs:</p><ul><li>If <strong>data</strong> is a string and has multiple lines, it will be processed as raw PostScript data.</li><li>If <strong>data</strong> is a simple string, it is assumed to contain the filename of the PostScript file to be read (if the file has no extension, defaults will try .eps and .ps in that order).</li><li>If <strong>data</strong> is an instance of <code>matplotlib.pyplot.Figure</code>, and only when additionally using a backend that supports output to (encapsulated) PostScript, the plugin will call <code>data.savefig()</code> to save the plot as a string and copy it to the TeXmacs document.</li><li>If <strong>data</strong> is a file or other object that provides a &quot;read&quot; method, PostScript data will be obtained by calling that method.</li></ul><h4 id="help-window" tabindex="-1">Help Window <a class="header-anchor" href="#help-window" aria-label="Permalink to “Help Window”">​</a></h4><p>If an object&#39;s source code is available through <code>inspect.getsource()</code>, then you can type that object followed by a question mark <code>?</code> to get a popup window containing the relevant <code>help()</code> and code.</p><h4 id="used-as-scripting-language" tabindex="-1">Used as Scripting Language <a class="header-anchor" href="#used-as-scripting-language" aria-label="Permalink to “Used as Scripting Language”">​</a></h4><p>In the Menu Bar, click <code>Insert</code> -&gt; <code>Fold</code> -&gt; <code>Runnable</code> -&gt; <code>Python</code>, which will generate the following output:</p><p><img src="'+P+'" alt=""></p><p><img src="'+x+'" alt=""></p><p>You can enter any Python expression or statement in the yellow box, for example:</p><p><img src="'+S+'" alt=""></p><p>Pressing the <code>Return</code> key or <code>Enter</code> key inside the box will switch between unevaluated input and evaluated output.</p><p><img src="'+I+'" alt=""></p><p>Similarly, for more complex code, you can use <code>Shift</code>+<code>Return\\Enter</code> to enable multi-line input.</p><p>But note that expressions (such as <code>1+2</code>) are computed using <code>eval()</code> and the resulting value is sent to TeXmacs, while statements (such as <code>print &quot;hi there&quot;</code>, or <code>a=1;a=a+2</code>) are sent to <code>compile()</code>, during which the return value of the last statement is lost. Therefore, if you have multiple expressions, you need to write to <code>os.sys.stdout</code> to see inline output.</p><blockquote><p>This limitation may be fixed in the future</p></blockquote><p>Additionally, after selecting <code>Document</code> -&gt; <code>Script</code> -&gt; <code>Python</code>, you can also use <code>\\</code> + <code>!</code> or <code>Insert</code> -&gt; <code>Link</code> -&gt; <code>Evaluable field</code>.</p><p><img src="'+T+'" alt=""></p><p><img src="'+E+'" alt=""></p><p>Similarly, pressing the <code>Return/Enter</code> key will switch between computed and uncomputed input. As shown below, notice that the environment switches between calc input and calc output.</p><p><img src="'+C+'" alt=""></p><p>For identifiers with associated values, you can reference these identifiers in other fields by using <code>\\</code> + <code>?</code> or <code>Insert</code> -&gt; <code>Link</code> -&gt; <code>Field reference</code> to insert field references. You can also use pure input fields via <code>\\</code> + <code>\\</code> or <code>Insert</code> -&gt; <code>Link</code> -&gt; <code>Input field</code>. This allows dynamic documents to automatically run scripts after changing reference fields. For more information on this topic, please refer to &quot;Plugins as Scripting Languages&quot; in the TeXmacs documentation.</p>',74)])])}const N=t(B,[["render",A]]);export{F as __pageData,N as default};
